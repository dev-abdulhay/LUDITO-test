CREATE TABLE auth.password_reset
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    uuid           UUID    DEFAULT gen_random_uuid()       NOT NULL,
    is_visible     BOOLEAN DEFAULT TRUE,
    created_at     TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at     TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    order_num      INTEGER,
    code           VARCHAR(255),
    code_expire    TIMESTAMP WITHOUT TIME ZONE,
    try_count      SMALLINT,
    is_reg         BOOLEAN,
    status         VARCHAR(255),
    status_message TEXT,
    user_id        BIGINT,
    CONSTRAINT pk_password_reset PRIMARY KEY (id)
);

CREATE TABLE auth."user"
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    uuid       UUID    DEFAULT gen_random_uuid()       NOT NULL,
    is_visible BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    order_num  INTEGER,
    username   VARCHAR(255)                            NOT NULL,
    first_name VARCHAR(255),
    last_name  VARCHAR(255),
    password   VARCHAR(255)                            NOT NULL,
    phone      VARCHAR(255),
    status     VARCHAR(255),
    CONSTRAINT pk_user PRIMARY KEY (id)
);

CREATE TABLE auth.user_access
(
    id                   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    uuid                 UUID    DEFAULT gen_random_uuid()       NOT NULL,
    is_visible           BOOLEAN DEFAULT TRUE,
    created_at           TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at           TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    order_num            INTEGER,
    refresh_token        TEXT,
    refresh_token_expire TIMESTAMP WITHOUT TIME ZONE,
    access_token         TEXT,
    access_token_expire  TIMESTAMP WITHOUT TIME ZONE,
    status               VARCHAR(255),
    code                 VARCHAR(255),
    user_id              BIGINT,
    CONSTRAINT pk_user_access PRIMARY KEY (id)
);

ALTER TABLE auth.password_reset
    ADD CONSTRAINT uc_password_reset_user UNIQUE (user_id);

ALTER TABLE auth.password_reset
    ADD CONSTRAINT uc_password_reset_uuid UNIQUE (uuid);

ALTER TABLE auth.user_access
    ADD CONSTRAINT uc_user_access_access_token UNIQUE (access_token);

ALTER TABLE auth.user_access
    ADD CONSTRAINT uc_user_access_refresh_token UNIQUE (refresh_token);

ALTER TABLE auth.user_access
    ADD CONSTRAINT uc_user_access_user UNIQUE (user_id);

ALTER TABLE auth.user_access
    ADD CONSTRAINT uc_user_access_uuid UNIQUE (uuid);

ALTER TABLE auth."user"
    ADD CONSTRAINT uc_user_username UNIQUE (username);

ALTER TABLE auth."user"
    ADD CONSTRAINT uc_user_uuid UNIQUE (uuid);

ALTER TABLE auth.password_reset
    ADD CONSTRAINT FK_PASSWORD_RESET_ON_USER FOREIGN KEY (user_id) REFERENCES auth."user" (id);

ALTER TABLE auth.user_access
    ADD CONSTRAINT FK_USER_ACCESS_ON_USER FOREIGN KEY (user_id) REFERENCES auth."user" (id);

CREATE TABLE billing.operation
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    uuid              UUID    DEFAULT gen_random_uuid()       NOT NULL,
    is_visible        BOOLEAN DEFAULT TRUE,
    created_at        TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at        TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    order_num         INTEGER,
    status            VARCHAR(255),
    type              VARCHAR(255),
    credit_wallet     BIGINT,
    debit_wallet      BIGINT,
    credit_amount     BIGINT,
    debit_amount      BIGINT,
    commission_amount BIGINT,
    user_id           BIGINT,
    execute_date      TIMESTAMP WITHOUT TIME ZONE,
    description       VARCHAR(255),
    CONSTRAINT pk_operation PRIMARY KEY (id)
);

CREATE TABLE billing.wallet
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    uuid           UUID    DEFAULT gen_random_uuid()       NOT NULL,
    is_visible     BOOLEAN DEFAULT TRUE,
    created_at     TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at     TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    order_num      INTEGER,
    name           VARCHAR(255)                            NOT NULL,
    account_number VARCHAR(255),
    currency       VARCHAR(255),
    balance        BIGINT,
    user_id        BIGINT                                  NOT NULL,
    CONSTRAINT pk_wallet PRIMARY KEY (id)
);

ALTER TABLE billing.operation
    ADD CONSTRAINT uc_operation_uuid UNIQUE (uuid);

ALTER TABLE billing.wallet
    ADD CONSTRAINT uc_wallet_account_number UNIQUE (account_number);

ALTER TABLE billing.wallet
    ADD CONSTRAINT uc_wallet_uuid UNIQUE (uuid);

CREATE INDEX idx_operation_uuid ON billing.operation (uuid);

ALTER TABLE billing.operation
    ADD CONSTRAINT FK_OPERATION_ON_CREDIT_WALLET FOREIGN KEY (credit_wallet) REFERENCES billing.wallet (id);

ALTER TABLE billing.operation
    ADD CONSTRAINT FK_OPERATION_ON_DEBIT_WALLET FOREIGN KEY (debit_wallet) REFERENCES billing.wallet (id);

ALTER TABLE billing.operation
    ADD CONSTRAINT FK_OPERATION_ON_USER FOREIGN KEY (user_id) REFERENCES auth."user" (id);

ALTER TABLE billing.wallet
    ADD CONSTRAINT FK_WALLET_ON_USER FOREIGN KEY (user_id) REFERENCES auth."user" (id);

CREATE TABLE info.operation_config
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    uuid               UUID    DEFAULT gen_random_uuid()       NOT NULL,
    is_visible         BOOLEAN DEFAULT TRUE,
    created_at         TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at         TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    order_num          INTEGER,
    type               VARCHAR(255)                            NOT NULL,
    currency           VARCHAR(255)                            NOT NULL,
    commission_percent BIGINT,
    min_amount         BIGINT,
    max_amount         BIGINT,
    CONSTRAINT pk_operation_config PRIMARY KEY (id)
);

ALTER TABLE info.operation_config
    ADD CONSTRAINT uc_18b4115acbe370d6288c2fd24 UNIQUE (type, currency);

ALTER TABLE info.operation_config
    ADD CONSTRAINT uc_operation_config_uuid UNIQUE (uuid);